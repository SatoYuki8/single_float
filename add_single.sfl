/*32bit floating adder*/
/*********************************************************************************
  Single-precision floating-point format
    _______________________________________________________________
   | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
   |3|3|2|2|2|2|2|2|2|2|2|2|1|1|1|1|1|1|1|1|1|1| | | | | | | | | | |  (32 bit)
   |1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0| 
   |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|
    | |_____________| |___________________________________________|
    |    exponent        fraction(23bit: precision=11bit)
  sign   (8bit)  
 (1bit)

**********************************************************************************/

/********************* sub modules *****************************/

/* shifter */
declare BarrelShift{
    input a<32>;
    input amount<8>;
    output f<32>;
    instrin do;
    instr_arg do(a, amount);
}
circuit BarrelShift{
    input a<32>;
    input amount<8>;
    output f<32>;
    instrin do;
    
    sel t0<32>, t1<32>, t2<32>, t3<32>, t4<32>;

    instruct do par{
	alt{
	    (amount<0>): t0 = a >> 0b1;
	    else: t0 = a;
	}
	alt{
	    (amount<1>): t1 = t0 >> 0b10;
	    else: t1 = t0;
	}
	alt{
	    (amount<2>): t2 = t1 >> 0b100;
	    else: t2 = t1;
	}
	alt{
	    (amount<3>): t3 = t2 >> 0b1000;
	    else: t3 = t2;
	}
	alt{
	    (amount<4>): t4 = t3 >> 0b10000;
	    else: t4 = t3;
	}
	
	f = t4;
    }
}

/* leading zero shifter */
declare LeadingZeroShift{
    input a<32>;
    output amount<8>;
    output f<32>;
    instrin do;
    instr_arg do(a);
}
circuit LeadingZeroShift{
    input a<32>;
    output amount<8>;
    output f<32>;
    instrin do;

    sel t0<32>, t1<32>, t2<32>, t3<32>, t4<32>;
    sel a0, a1, a2, a3, a4;

    instruct do par{
	alt{
	    (a<31:16> == 0b0000000000000000): par{ a4 = 0b1; t0 = a<<0b10000; }
	    else: par{ a4 = 0b0; t0 = a; }
	}
	alt{
	    (a<31:24> == 0b00000000): par{ a3 = 0b1; t1 = a<<0b1000; }
	    else: par{ a3 = 0b0; t1 = t0; }
	}
	alt{
	    (t0<31:28> == 0b0000): par{ a2 = 0b1; t2 = t0<<0b100; }
	    else: par{ a2 = 0b0; t2 = t1; }
	}
	alt{
	    (t1<31:30> == 0b00): par{ a1 = 0b1; t3 = t2<<0b10; }
	    else: par{ a1 = 0b0; t3 = t2; }
	}
	alt{
	    (t2<31> == 0b0): par{ a0 = 0b1; t4 = t3<<0b1; }
	    else: par{ a0 = 0b0; t4 = t3; }
	}

	amount = (0b000||a4||a3||a2||a1||a0);
	f = t4;
    }
}    

/* mantissa adder */
declare MantissaAdder{
    input s1, s2;
    input x1<32>, x2<32>;
    output r1<32>;
    instrin do;

    instr_arg do(s1, s2, x1, x2);
}

circuit MantissaAdder{
    input s1, s2;
    input x1<32>, x2<32>;
    output r1<32>;
    instrin do;

    instruct do par{
	r1 = (32#s1 @ x1) + s1 + (32#s2 @ x2) + s2;
    }
}

/************************* main module *******************************/
circuit add_single{
    input a<32>, b<32>;
    output result<32>;
    instrin do;
/*    instrout done;       */

    BarrelShift bshift;
    LeadingZeroShift lzshift;
    MantissaAdder madd;

    /*start*/
    sel wdiff<9>;

    sel exp_diff<8>;
    sel Aa<32>, Bb<32>;

    /*pre-shift for adder operation*/
    sel xmsb<3>, ymsb<3>;

    sel Bm1<32>, Bm2<32>, Bs1, Bs2, Bexp<8>;    

    /*mantissa addition*/    
    sel m3<32>;
    
    sel Cm<32>, Cs, Cexp<8>;    

    /*leading zero shift*/
    sel z<32>;

    /*return resurt*/
    
    /***************************************************************/
    instruct do par{
	/*start*/
	wdiff = (0b0||a<30:23>) + (^(0b0||b<30:23>) + 0b1);
	alt{
	    (wdiff<8>): par{
		exp_diff = ^wdiff<7:0> + 0b1;
		Aa = b; Bb = a;
	    }
	    else: par{
		exp_diff = wdiff<7:0>;
		Aa = a; Bb = b;
	    }
	}

	/*pre-shift for adder operation*/
	alt{
	    (Aa<30:23> == 0b00000000): xmsb = 0b000;
	    else: xmsb = 0b001;
	}

	alt{
	    (Bb<30:23> == 0b00000000): ymsb = 0b000;
	    else: ymsb = 0b001;
	}

	Bm1 = xmsb || Aa<22:0> || 0b000000;
	Bm2 = bshift.do((ymsb || Bb<22:0> || 0b000000), exp_diff).f;
	Bs1 = Aa<31>;
	Bs2 = Bb<31>;
	Bexp = Aa<30:23>;

	/*mantissa addition*/
	m3 = madd.do(Bs1, Bs2, Bm1, Bm2).r1;
	
	alt{
	    (m3<31>): par{
		Cm = ^m3+0b1;
		Cs = m3<31>;
		Cexp = Bexp;
	    }
	    else: par{
		Cm = m3;
		Cs = m3<31>;
		Cexp = Bexp;		
	    }
	}

	/*leading zero shift*/
	alt{
	    (Cm == 0x00000000): z = 0x00000000;
	    (Cexp == 0b00000000): z = Cs || Cexp || Cm<28:6>;
	    else: z = Cs || ((Cexp + ^(lzshift.amount) + 0b1) + 0b1) ||
		      lzshift.do(Cm<30:0>||0b0).f<30:8>;
	}

	/*return resurt*/
	result = z;
	/*done(z);*/
    }
}
/*End of File.*/
